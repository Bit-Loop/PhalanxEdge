#!/bin/bash
# Proxmox Inventory Updater
# This script updates the Proxmox inventory file automatically and manages SSH keys

# Configuration
ANSIBLE_DIR="${HOME}/.ansible"
LOG_DIR="${ANSIBLE_DIR}/logs"
INVENTORY_DIR="${ANSIBLE_DIR}/inventory"
GENERATED_DIR="${INVENTORY_DIR}/generated"
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
LOG_FILE="${LOG_DIR}/proxmox_inventory_update_${TIMESTAMP}.log"
SSH_KEY_SCRIPT="${ANSIBLE_DIR}/scripts/setup_ssh_keys.sh"

# Ensure directories exist
mkdir -p "${LOG_DIR}"
mkdir -p "${GENERATED_DIR}"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${LOG_FILE}"
}

# Check dependencies
for cmd in ansible-playbook ansible-inventory jq sshpass; do
    if ! command -v $cmd &> /dev/null; then
        log "ERROR: Required command '$cmd' not found. Please install it."
        exit 1
    fi
done

echo "Starting Proxmox inventory update at $(date)" | tee -a "${LOG_FILE}"

# Step 1: Run inventory collection playbook
echo "Running Proxmox monitoring playbook..." | tee -a "${LOG_FILE}"
cd "${ANSIBLE_DIR}/playbooks" || { echo "Failed to change directory to ${ANSIBLE_DIR}/playbooks" | tee -a "${LOG_FILE}"; exit 1; }
ansible-playbook proxmox/monitoring.yml -t export_inventory

# Step 2: Verify generated inventory
LATEST_INVENTORY="${GENERATED_DIR}/proxmox_vms_latest.yml"
if [ ! -f "${LATEST_INVENTORY}" ]; then
    echo "ERROR: Inventory file was not generated!" | tee -a "${LOG_FILE}"
    exit 1
fi

echo "Inventory updated successfully at $(date)" | tee -a "${LOG_FILE}"

# Step 3: Run Ansible inventory command to validate
echo "Validating inventory..." | tee -a "${LOG_FILE}"
ansible-inventory -i "${LATEST_INVENTORY}" --list > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "WARNING: Generated inventory validation failed!" | tee -a "${LOG_FILE}"
else
    echo "Inventory validated successfully!" | tee -a "${LOG_FILE}"
fi

# Step 4: Update main inventory file if required
MAIN_INVENTORY="${INVENTORY_DIR}/proxmox_hosts.yml"
BACKUP_DIR="${INVENTORY_DIR}/backups"
mkdir -p "${BACKUP_DIR}"

if [ -f "${MAIN_INVENTORY}" ]; then
    echo "Creating backup of current inventory file..." | tee -a "${LOG_FILE}"
    cp "${MAIN_INVENTORY}" "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml"
fi

echo "Updating main Proxmox inventory..." | tee -a "${LOG_FILE}"
cat > "${MAIN_INVENTORY}" << 'EOFHEADER'
# filepath: /home/ubuntu/.ansible/inventory/proxmox_hosts.yml
---
# PhalanxEdge - Proxmox Inventory
# This file defines the Proxmox hosts and clusters to be managed
# Last updated: $(date)
# DO NOT EDIT THIS FILE MANUALLY - It is automatically generated
all:
  children:
    proxmox:
      children:
EOFHEADER

# Extract and maintain cluster configuration but update VM and container data
if grep -q "proxmox_clusters:" "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml"; then
    # Extract cluster configuration
    sed -n '/proxmox_clusters:/,/standalone_nodes:/p' "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml" >> "${MAIN_INVENTORY}"
else
    # Default cluster structure if none existed
    cat >> "${MAIN_INVENTORY}" << 'EOF'
        proxmox_clusters:
          children:
            cluster1:
              # hosts:
              #   pve01:
              #     ansible_host: 192.168.1.101
              #     node_id: 1
              #     node_role: master
              #     quorum_vote: yes
EOF
fi

# Append generated VM inventory (excluding the header)
if [ -f "${LATEST_INVENTORY}" ]; then
    echo "Merging generated VM data..." | tee -a "${LOG_FILE}"
    # Extract the functional groupings from backup
    if grep -q "storage_nodes:" "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml"; then
        sed -n '/storage_nodes:/,/vars:/p' "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml" >> "${MAIN_INVENTORY}"
    fi

    # Extract global variables
    if grep -q "vars:" "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml"; then
        sed -n '/vars:/,$p' "${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml" >> "${MAIN_INVENTORY}"
    else
        # Default vars if none existed
        cat >> "${MAIN_INVENTORY}" << 'EOF'
      vars:
        ansible_user: root  # Default user for Proxmox management
        proxmox_api_user: "root@pam"
        proxmox_api_password: "{{ vault_proxmox_api_password }}"  # Use ansible-vault to secure
        proxmox_api_host: "{{ ansible_host }}"
        proxmox_api_port: 8006
        proxmox_verify_ssl: false  # Change to true in production
        proxmox_node_network:
          interface: vmbr0
          address: "{{ ansible_host }}/24"
          gateway: 192.168.1.1
EOF
    fi
fi

# Step 7: Set up SSH keys if required
if [ -x "${SSH_KEY_SCRIPT}" ]; then
    echo "Setting up SSH keys for inventory hosts..." | tee -a "${LOG_FILE}" 
    "${SSH_KEY_SCRIPT}" >> "${LOG_FILE}" 2>&1
    if [ $? -eq 0 ]; then
        echo "SSH keys set up successfully!" | tee -a "${LOG_FILE}"
    else
        echo "WARNING: SSH key setup had some issues. Check the log for details." | tee -a "${LOG_FILE}"
    fi
else
    echo "SSH key setup script not found or not executable at ${SSH_KEY_SCRIPT}. Skipping SSH key setup." | tee -a "${LOG_FILE}"
    echo "You can make it executable with: chmod +x ${SSH_KEY_SCRIPT}" | tee -a "${LOG_FILE}"
fi

echo "Proxmox inventory update completed at $(date)" | tee -a "${LOG_FILE}"
echo "Summary:"
echo "- Updated Proxmox VM inventory in ${MAIN_INVENTORY}"
echo "- Backup saved to ${BACKUP_DIR}/proxmox_hosts_${TIMESTAMP}.yml"
echo "- SSH keys configured for automated access"
echo "- Log file: ${LOG_FILE}"

# Make the script executable if it's not
if [ ! -x "${SSH_KEY_SCRIPT}" ]; then
    chmod +x "${SSH_KEY_SCRIPT}"
    echo "Made SSH key script executable for next run" | tee -a "${LOG_FILE}"
fi
